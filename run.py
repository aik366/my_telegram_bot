import os
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
from dotenv import load_dotenv

load_dotenv()


# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    amount = State()
    category = State()
    filter_type = State()
    filter_value = State()
    edit_transaction = State()
    edit_field = State()
    new_value = State()
    delete_confirmation = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher()


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
async def create_db():
    async with aiosqlite.connect('finance.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                type TEXT,
                amount REAL,
                category TEXT,
                date TEXT
            )
        ''')
        await db.commit()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    buttons = [
        [InlineKeyboardButton(text="üìâ –†–∞—Å—Ö–æ–¥", callback_data="—Ä–∞—Å—Ö–æ–¥")],
        [InlineKeyboardButton(text="üìà –î–æ—Ö–æ–¥", callback_data="–¥–æ—Ö–æ–¥")],
        [InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä", callback_data="view")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
def filter_menu():
    buttons = [
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ", callback_data="filter_date")],
        [InlineKeyboardButton(text="üìÜ –ü–æ –º–µ—Å—è—Ü—É", callback_data="filter_month")],
        [InlineKeyboardButton(text="üìÖ –ü–æ –≥–æ–¥—É", callback_data="filter_year")],
        [InlineKeyboardButton(text="üìâ –ü–æ —Ä–∞—Å—Ö–æ–¥–∞–º", callback_data="filter_—Ä–∞—Å—Ö–æ–¥—ã")],
        [InlineKeyboardButton(text="üìà –ü–æ –¥–æ—Ö–æ–¥–∞–º", callback_data="filter_–¥–æ—Ö–æ–¥—ã")],
        [InlineKeyboardButton(text="üîç –í—Å–µ –∑–∞–ø–∏—Å–∏", callback_data="filter_all")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
def transaction_menu(transaction_id):
    buttons = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{transaction_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{transaction_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_view")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def edit_field_menu(transaction_id):
    buttons = [
        [InlineKeyboardButton(text="–¢–∏–ø", callback_data=f"field_type_{transaction_id}")],
        [InlineKeyboardButton(text="–°—É–º–º—É", callback_data=f"field_amount_{transaction_id}")],
        [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"field_category_{transaction_id}")],
        [InlineKeyboardButton(text="–î–∞—Ç—É", callback_data=f"field_date_{transaction_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_transaction_{transaction_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def show_transactions(source: Message | CallbackQuery, user_id: int, filter_query=None, filter_value=None):
    query = "SELECT id, type, amount, category, date FROM transactions WHERE user_id = ?"
    params = [user_id]

    if filter_query and filter_value:
        query += f" AND {filter_query}"
        params.append(filter_value)

    query += " ORDER BY date DESC"

    async with aiosqlite.connect('finance.db') as db:
        cursor = await db.execute(query, tuple(params))
        transactions = await cursor.fetchall()

    if not transactions:
        if isinstance(source, Message):
            await source.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu())
        else:
            await source.message.edit_text("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.", reply_markup=main_menu())
    else:
        buttons = []
        for trans in transactions:
            btn_text = f"{trans[4][:10]} - {trans[1]}: {trans[2]} ({trans[3]})"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"show_{trans[0]}")])

        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        markup = InlineKeyboardMarkup(inline_keyboard=buttons)

        if isinstance(source, Message):
            await source.answer("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)
        else:
            await source.message.edit_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üí∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞—Å—Ö–æ–¥"
@dp.callback_query(F.data == "—Ä–∞—Å—Ö–æ–¥")
async def expense_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.amount)
    await state.update_data(type="—Ä–∞—Å—Ö–æ–¥")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ—Ö–æ–¥"
@dp.callback_query(F.data == "–¥–æ—Ö–æ–¥")
async def income_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.amount)
    await state.update_data(type="–¥–æ—Ö–æ–¥")
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(Form.amount)
async def process_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
        await state.update_data(amount=amount)
        await state.set_state(Form.category)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(Form.category)
async def process_category(message: Message, state: FSMContext):
    category = message.text
    data = await state.get_data()
    transaction_type = data['type']
    amount = data['amount']
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    async with aiosqlite.connect('finance.db') as db:
        await db.execute(
            "INSERT INTO transactions (user_id, type, amount, category, date) VALUES (?, ?, ?, ?, ?)",
            (message.from_user.id, transaction_type, amount, category, date)
        )
        await db.commit()

    await message.answer(
        f"‚úÖ {'–†–∞—Å—Ö–æ–¥' if transaction_type == '—Ä–∞—Å—Ö–æ–¥' else '–î–æ—Ö–æ–¥'} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n"
        f"–°—É–º–º–∞: {amount}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
        reply_markup=main_menu()
    )
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä"
@dp.callback_query(F.data == "view")
async def view_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=filter_menu()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
@dp.callback_query(F.data.startswith("filter_"))
async def filter_callback(callback: CallbackQuery, state: FSMContext):
    filter_type = callback.data.split("_")[1]

    if filter_type == "all":
        await show_transactions(callback, callback.from_user.id)
    elif filter_type in ["—Ä–∞—Å—Ö–æ–¥—ã", "–¥–æ—Ö–æ–¥—ã"]:
        transaction_type = "—Ä–∞—Å—Ö–æ–¥" if filter_type == "—Ä–∞—Å—Ö–æ–¥—ã" else "–¥–æ—Ö–æ–¥"
        await show_transactions(callback, callback.from_user.id, "type = ?", transaction_type)
    else:
        await state.set_state(Form.filter_value)
        await state.update_data(filter_type=filter_type)
        prompt = {
            "date": "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
            "month": "–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—Ü –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú:",
            "year": "–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì:"
        }[filter_type]
        await callback.message.edit_text(prompt)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
@dp.message(Form.filter_value)
async def process_filter_value(message: Message, state: FSMContext):
    data = await state.get_data()
    filter_type = data['filter_type']
    filter_value = message.text

    try:
        if filter_type == "date":
            datetime.strptime(filter_value, "%Y-%m-%d")
            query = "date LIKE ?"
            filter_value = f"{filter_value}%"
        elif filter_type == "month":
            datetime.strptime(filter_value, "%Y-%m")
            query = "date LIKE ?"
            filter_value = f"{filter_value}%"
        elif filter_type == "year":
            datetime.strptime(filter_value, "%Y")
            query = "date LIKE ?"
            filter_value = f"{filter_value}%"

        await show_transactions(message, message.from_user.id, query, filter_value)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.callback_query(F.data.startswith("show_"))
async def show_transaction(callback: CallbackQuery):
    transaction_id = int(callback.data.split("_")[1])

    async with aiosqlite.connect('finance.db') as db:
        cursor = await db.execute(
            "SELECT id, type, amount, category, date FROM transactions WHERE id = ?",
            (transaction_id,)
        )
        transaction = await cursor.fetchone()

    if transaction:
        text = (f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction[0]}:\n\n"
                f"–¢–∏–ø: {transaction[1]}\n"
                f"–°—É–º–º–∞: {transaction[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction[3]}\n"
                f"–î–∞—Ç–∞: {transaction[4]}")

        await callback.message.edit_text(
            text,
            reply_markup=transaction_menu(transaction[0])
        )
    else:
        await callback.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("edit_"))
async def edit_callback(callback: CallbackQuery):
    transaction_id = int(callback.data.split("_")[1])
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_field_menu(transaction_id)
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dp.callback_query(F.data.startswith("field_"))
async def edit_field_callback(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    field = parts[1]
    transaction_id = int(parts[2])

    await state.set_state(Form.new_value)
    await state.update_data(edit_field=field, transaction_id=transaction_id)

    prompts = {
        "type": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø (—Ä–∞—Å—Ö–æ–¥/–¥–æ—Ö–æ–¥):",
        "amount": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:",
        "category": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú:–°–°):"
    }

    await callback.message.edit_text(prompts[field])
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@dp.message(Form.new_value)
async def process_new_value(message: Message, state: FSMContext):
    data = await state.get_data()
    transaction_id = data['transaction_id']
    field = data['edit_field']
    new_value = message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        if field == "amount":
            new_value = float(new_value)
            if new_value <= 0:
                raise ValueError
        elif field == "type":
            if new_value not in ("—Ä–∞—Å—Ö–æ–¥", "–¥–æ—Ö–æ–¥"):
                raise ValueError
        elif field == "date":
            datetime.strptime(new_value, "%Y-%m-%d %H:%M:%S")

        async with aiosqlite.connect('finance.db') as db:
            await db.execute(
                f"UPDATE transactions SET {field} = ? WHERE id = ?",
                (new_value, transaction_id)
            )
            await db.commit()

        await message.answer("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_transaction_after_edit(message, transaction_id)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    await state.clear()


async def show_transaction_after_edit(message: Message, transaction_id: int):
    async with aiosqlite.connect('finance.db') as db:
        cursor = await db.execute(
            "SELECT id, type, amount, category, date FROM transactions WHERE id = ?",
            (transaction_id,)
        )
        transaction = await cursor.fetchone()

    if transaction:
        text = (f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction[0]}:\n\n"
                f"–¢–∏–ø: {transaction[1]}\n"
                f"–°—É–º–º–∞: {transaction[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction[3]}\n"
                f"–î–∞—Ç–∞: {transaction[4]}")

        await message.answer(
            text,
            reply_markup=transaction_menu(transaction_id)
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("delete_"))
async def delete_callback(callback: CallbackQuery):
    transaction_id = int(callback.data.split("_")[1])

    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"confirm_delete_{transaction_id}")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"back_to_transaction_{transaction_id}")]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?",
        reply_markup=markup
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete(callback: CallbackQuery):
    transaction_id = int(callback.data.split("_")[2])

    async with aiosqlite.connect('finance.db') as db:
        await db.execute(
            "DELETE FROM transactions WHERE id = ?",
            (transaction_id,)
        )
        await db.commit()

    await callback.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=main_menu())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.callback_query(F.data.startswith("back_to_transaction_"))
async def back_to_transaction(callback: CallbackQuery):
    transaction_id = int(callback.data.split("_")[3])

    async with aiosqlite.connect('finance.db') as db:
        cursor = await db.execute(
            "SELECT id, type, amount, category, date FROM transactions WHERE id = ?",
            (transaction_id,)
        )
        transaction = await cursor.fetchone()

    if transaction:
        text = (f"üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è #{transaction[0]}:\n\n"
                f"–¢–∏–ø: {transaction[1]}\n"
                f"–°—É–º–º–∞: {transaction[2]}\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction[3]}\n"
                f"–î–∞—Ç–∞: {transaction[4]}")

        await callback.message.edit_text(
            text,
            reply_markup=transaction_menu(transaction[0])
        )
    else:
        await callback.message.edit_text("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=main_menu())

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
@dp.callback_query(F.data == "back_to_view")
async def back_to_view(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞:",
        reply_markup=filter_menu()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    await callback.answer()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await create_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())